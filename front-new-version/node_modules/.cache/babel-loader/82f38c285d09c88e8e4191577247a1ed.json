{"ast":null,"code":"var _jsxFileName = \"/Users/dev/Documents/GitHub/React-Code-Interview-Class-WebSocket-Exepliar/aa/src/hoc/WrappedSocketManager/index.js\";\nimport React from 'react';\nimport io from 'socket.io-client';\nimport { connect } from 'react-redux';\nimport { addReportJson } from '../../store/actions';\nexport const SocketContext = React.createContext({\n  prices: {}\n}); // export const useWebsocket = () => React.useContext(SocketContext);\n\nexport class WrappedSocketManager extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      prices: []\n    };\n    this.socket = null;\n    this.socket = io.connect(process.env.NODE_ENV === 'development' ? `http://localhost:3012/` : `http://localhost:3012/`, {\n      transports: ['websocket'],\n      rejectUnauthorized: false,\n      secure: true\n    });\n    this.socket.on('new message', payload => {\n      // Redux store updates\n      this.props.onAddReportJson(payload); // Component state updates\n\n      this.setState({\n        prices: payload\n      });\n    });\n  }\n\n  componentWillUnmount() {\n    try {\n      this.socket !== null && this.socket.disconnect();\n    } catch (e) {// socket not connected\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(SocketContext.Provider, {\n      value: {\n        prices: this.state.prices\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 7\n      }\n    }, this.props.children);\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAddReportJson: payload => dispatch(addReportJson(payload))\n  };\n};\n\nexport const SocketManager = connect(null, mapDispatchToProps)(WrappedSocketManager);\nexport default SocketManager;","map":{"version":3,"sources":["/Users/dev/Documents/GitHub/React-Code-Interview-Class-WebSocket-Exepliar/aa/src/hoc/WrappedSocketManager/index.js"],"names":["React","io","connect","addReportJson","SocketContext","createContext","prices","WrappedSocketManager","Component","constructor","props","state","socket","process","env","NODE_ENV","transports","rejectUnauthorized","secure","on","payload","onAddReportJson","setState","componentWillUnmount","disconnect","e","render","children","mapDispatchToProps","dispatch","SocketManager"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,aAAT,QAA8B,qBAA9B;AAEA,OAAO,MAAMC,aAAa,GAAGJ,KAAK,CAACK,aAAN,CAAoB;AAC/CC,EAAAA,MAAM,EAAE;AADuC,CAApB,CAAtB,C,CAIP;;AAEA,OAAO,MAAMC,oBAAN,SAAmCP,KAAK,CAACQ,SAAzC,CAAmD;AAQxDC,EAAAA,WAAW,CAAEC,KAAF,EAAU;AACnB,UAAMA,KAAN;AADmB,SANrBC,KAMqB,GANb;AACNL,MAAAA,MAAM,EAAE;AADF,KAMa;AAAA,SAFrBM,MAEqB,GAFZ,IAEY;AAGnB,SAAKA,MAAL,GAAcX,EAAE,CAACC,OAAH,CAAWW,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAAzB,GACpB,wBADoB,GAEpB,wBAFS,EAGV;AACAC,MAAAA,UAAU,EAAE,CAAE,WAAF,CADZ;AAEAC,MAAAA,kBAAkB,EAAE,KAFpB;AAGAC,MAAAA,MAAM,EAAE;AAHR,KAHU,CAAd;AASA,SAAKN,MAAL,CAAYO,EAAZ,CAAe,aAAf,EAAgCC,OAAF,IAAe;AAE3C;AACA,WAAKV,KAAL,CAAWW,eAAX,CAA2BD,OAA3B,EAH2C,CAK3C;;AACA,WAAKE,QAAL,CAAc;AACZhB,QAAAA,MAAM,EAAEc;AADI,OAAd;AAGD,KATD;AAUD;;AAEDG,EAAAA,oBAAoB,GAAG;AACrB,QAAI;AACF,WAAKX,MAAL,KAAgB,IAAhB,IAAwB,KAAKA,MAAL,CAAYY,UAAZ,EAAxB;AACD,KAFD,CAEE,OAAOC,CAAP,EAAU,CACV;AACD;AACF;;AAEDC,EAAAA,MAAM,GAAG;AACP,wBACE,oBAAC,aAAD,CAAe,QAAf;AAAwB,MAAA,KAAK,EAAE;AAC7BpB,QAAAA,MAAM,EAAE,KAAKK,KAAL,CAAWL;AADU,OAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGG,KAAKI,KAAL,CAAWiB,QAHd,CADF;AAOD;;AAhDuD;;AAoD1D,MAAMC,kBAAkB,GAAGC,QAAQ,IAAI;AACrC,SAAO;AACLR,IAAAA,eAAe,EAAID,OAAF,IAAeS,QAAQ,CAAC1B,aAAa,CAACiB,OAAD,CAAd;AADnC,GAAP;AAGD,CAJD;;AAMA,OAAO,MAAMU,aAAa,GAAG5B,OAAO,CAClC,IADkC,EAElC0B,kBAFkC,CAAP,CAG3BrB,oBAH2B,CAAtB;AAKP,eAAeuB,aAAf","sourcesContent":["import React from 'react';\nimport io from 'socket.io-client';\nimport { connect } from 'react-redux';\nimport { addReportJson } from '../../store/actions';\n\nexport const SocketContext = React.createContext({\n  prices: {}\n});\n\n// export const useWebsocket = () => React.useContext(SocketContext);\n\nexport class WrappedSocketManager extends React.Component {\n\n  state = {\n    prices: [],\n  };\n\n  socket = null;\n\n  constructor( props ) {\n    super(props);\n\n    this.socket = io.connect(process.env.NODE_ENV === 'development'\n      ? `http://localhost:3012/`\n      : `http://localhost:3012/`\n      , {\n        transports: [ 'websocket' ],\n        rejectUnauthorized: false,\n        secure: true\n      });\n\n    this.socket.on('new message', ( payload ) => {\n\n      // Redux store updates\n      this.props.onAddReportJson(payload);\n\n      // Component state updates\n      this.setState({\n        prices: payload,\n      });\n    });\n  }\n\n  componentWillUnmount() {\n    try {\n      this.socket !== null && this.socket.disconnect();\n    } catch (e) {\n      // socket not connected\n    }\n  }\n\n  render() {\n    return (\n      <SocketContext.Provider value={{\n        prices: this.state.prices\n      }}>\n        {this.props.children}\n      </SocketContext.Provider>\n    );\n  }\n}\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAddReportJson: ( payload ) => dispatch(addReportJson(payload))\n  };\n};\n\nexport const SocketManager = connect(\n  null,\n  mapDispatchToProps\n)(WrappedSocketManager);\n\nexport default SocketManager;"]},"metadata":{},"sourceType":"module"}