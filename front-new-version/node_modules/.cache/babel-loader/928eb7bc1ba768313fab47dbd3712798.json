{"ast":null,"code":"var _jsxFileName = \"/Users/dev/Documents/GitHub/React-Code-Interview-Class-WebSocket-Exepliar/front-new-version/src/containers/Auth/Auth.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport classes from './Auth.css';\nimport * as actions from '../../store/actions/index';\nimport { updateObject, checkValidity } from '../../shared/utility';\n\nclass Auth extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Mail Address'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'password',\n            placeholder: 'Password'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      isSignup: true\n    };\n\n    this.inputChangedHandler = (event, controlName) => {\n      const updatedControls = updateObject(this.state.controls, {\n        [controlName]: updateObject(this.state.controls[controlName], {\n          value: event.target.value,\n          valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\n          touched: true\n        })\n      });\n      this.setState({\n        controls: updatedControls\n      });\n    };\n\n    this.submitHandler = event => {\n      event.preventDefault();\n      this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\n    };\n\n    this.switchAuthModeHandler = () => {\n      this.setState(prevState => {\n        return {\n          isSignup: !prevState.isSignup\n        };\n      });\n    };\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n\n    let form = formElementsArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      changed: event => this.inputChangedHandler(event, formElement.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 7\n      }\n    }));\n\n    if (this.props.loading) {\n      form = /*#__PURE__*/React.createElement(Spinner, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 14\n        }\n      });\n    }\n\n    let errorMessage = null;\n\n    if (this.props.error) {\n      errorMessage = /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 9\n        }\n      }, this.props.error.message);\n    }\n\n    let authRedirect = null;\n\n    if (this.props.isAuthenticated) {\n      authRedirect = /*#__PURE__*/React.createElement(Redirect, {\n        to: this.props.authRedirectPath,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 22\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.Auth,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 7\n      }\n    }, authRedirect, errorMessage, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.submitHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }\n    }, form, /*#__PURE__*/React.createElement(Button, {\n      btnType: \"Success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }\n    }, \"SUBMIT\")), /*#__PURE__*/React.createElement(Button, {\n      clicked: this.switchAuthModeHandler,\n      btnType: \"Danger\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }\n    }, \"SWITCH TO \", this.state.isSignup ? 'SIGNIN' : 'SIGNUP'));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    authRedirectPath: state.auth.authRedirectPath\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["/Users/dev/Documents/GitHub/React-Code-Interview-Class-WebSocket-Exepliar/front-new-version/src/containers/Auth/Auth.js"],"names":["React","Component","connect","Redirect","Input","Button","Spinner","classes","actions","updateObject","checkValidity","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","target","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","render","formElementsArray","key","push","id","config","form","map","formElement","loading","errorMessage","error","message","authRedirect","isAuthenticated","authRedirectPath","mapStateToProps","auth","token","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport classes from './Auth.css';\nimport * as actions from '../../store/actions/index';\nimport { updateObject, checkValidity } from '../../shared/utility';\n\nclass Auth extends Component {\n  state = {\n    controls: {\n      email: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'email',\n          placeholder: 'Mail Address'\n        },\n        value: '',\n        validation: {\n          required: true,\n          isEmail: true\n        },\n        valid: false,\n        touched: false\n      },\n      password: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'password',\n          placeholder: 'Password'\n        },\n        value: '',\n        validation: {\n          required: true,\n          minLength: 6\n        },\n        valid: false,\n        touched: false\n      }\n    },\n    isSignup: true\n  };\n\n  inputChangedHandler = ( event, controlName ) => {\n    const updatedControls = updateObject(this.state.controls, {\n      [controlName]: updateObject(this.state.controls[controlName], {\n        value: event.target.value,\n        valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\n        touched: true\n      })\n    });\n    this.setState({ controls: updatedControls });\n  };\n\n  submitHandler = ( event ) => {\n    event.preventDefault();\n    this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\n  };\n\n  switchAuthModeHandler = () => {\n    this.setState(prevState => {\n      return { isSignup: !prevState.isSignup };\n    });\n  };\n\n  render() {\n    const formElementsArray = [];\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n\n    let form = formElementsArray.map(formElement => (\n      <Input\n        key={formElement.id}\n        elementType={formElement.config.elementType}\n        elementConfig={formElement.config.elementConfig}\n        value={formElement.config.value}\n        invalid={!formElement.config.valid}\n        shouldValidate={formElement.config.validation}\n        touched={formElement.config.touched}\n        changed={( event ) => this.inputChangedHandler(event, formElement.id)}/>\n    ));\n\n    if (this.props.loading) {\n      form = <Spinner/>;\n    }\n\n    let errorMessage = null;\n\n    if (this.props.error) {\n      errorMessage = (\n        <p>{this.props.error.message}</p>\n      );\n    }\n\n    let authRedirect = null;\n    if (this.props.isAuthenticated) {\n      authRedirect = <Redirect to={this.props.authRedirectPath}/>;\n    }\n\n    return (\n      <div className={classes.Auth}>\n        {authRedirect}\n        {errorMessage}\n        <form onSubmit={this.submitHandler}>\n          {form}\n          <Button btnType=\"Success\">SUBMIT</Button>\n        </form>\n        <Button\n          clicked={this.switchAuthModeHandler}\n          btnType=\"Danger\">SWITCH TO {this.state.isSignup ? 'SIGNIN' : 'SIGNUP'}</Button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    authRedirectPath: state.auth.authRedirectPath\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: ( email, password, isSignup ) => dispatch(actions.auth(email, password, isSignup)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);"]},"metadata":{},"sourceType":"module"}